kind: pipeline
name: default

steps:
  - name: test
    image: node:10-alpine
    commands:
      - npm install
      # - npm run test
    when:
      branch:
        - master
      event:
        - push
        - pull-request

  - name: deploy
    image: docker
    volumes:
      - name: docker
        path: /var/run/docker.sock
    environment:
      NODE_ENV:
        from_secret: NODE_ENV
      SECRET:
        from_secret: SECRET
      SECRET_JWT:
        from_secret: SECRET_JWT
      TEACHER_LOGIN:
        from_secret: TEACHER_LOGIN
      TEACHER_PASS:
        from_secret: TEACHER_PASS
      STUDENT_LOGIN:
        from_secret: STUDENT_LOGIN
      STUDENT_PASS:
        from_secret: STUDENT_PASS
      DB_HOST:
        from_secret: DB_HOST
      DB_PORT:
        from_secret: DB_PORT
      DB_USER:
        from_secret: DB_USER
      DB_PASS:
        from_secret: DB_PASS
      DB_DATABASE:
        from_secret: DB_DATABASE
      PORT: 8445
    settings:
      build_args_from_env:
      - NODE_ENV
      - SECRET
      - SECRET_JWT
      - PORT
      - TEACHER_LOGIN
      - TEACHER_PASS
      - STUDENT_LOGIN
      - STUDENT_PASS
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASS
      - DB_DATABASE
    commands:
      - docker build -t nick/auth_service .
      - docker rmi -f $(docker images -f "dangling=true" -q) || true
      - docker container stop auth_service || true && docker rm auth_service || true
      - docker run -v /home/auth_service_logs:/home/node/auth-service/logs -v /home/ssl:/home/node/auth-service/ssl -e NODE_ENV=$NODE_ENV -e SECRET=$SECRET -e SECRET_JWT=$SECRET_JWT -e PORT=$PORT -e TEACHER_LOGIN=$TEACHER_LOGIN -e TEACHER_PASS=$TEACHER_PASS -e STUDENT_LOGIN=$STUDENT_LOGIN -e STUDENT_PASS=$STUDENT_PASS -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_USER=$DB_USER -e DB_PASS=$DB_PASS -e DB_DATABASE=$DB_DATABASE -p 8445:8445 --net="host" -d --restart="always" --name=auth_service nick/auth_service
    when:
      branch:
        - master
      event:
        - push
        - pull-request

  - name: telegram
    image: appleboy/drone-telegram:latest
    settings:
      token:
        from_secret: telegram_token
      to:
        from_secret: telegram_user_id
      message: >
      format: html
      message: >
        {{#success build.status}}
          <code>{{repo.owner}}/{{repo.name}}</code> <a href="{{build.link}}">SUCCESS</a> 
          <code>{{commit.branch}}</code>@<a href="{{commit.link}}">{{truncate commit.sha 7}}</a>
        {{else}}
          <code>{{repo.owner}}/{{repo.name}}</code> <a href="{{build.link}}">FAILURE</a>
          <code>{{commit.branch}}</code>@<a href="{{commit.link}}">{{truncate commit.sha 7}}</a>
        {{/success}}
    when:
      status: [success, failure]

volumes:
  - name: docker
    host:
      path: /var/run/docker.sock